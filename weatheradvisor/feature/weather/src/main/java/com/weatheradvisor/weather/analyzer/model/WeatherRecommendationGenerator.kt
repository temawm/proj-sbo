package com.weatheradvisor.weather.analyzer.model

import com.weatheradvisor.weather.analyzer.models.RecommendationPriority
import com.weatheradvisor.weather.analyzer.models.RecommendationType
import com.weatheradvisor.weather.analyzer.models.WeatherAnalysis
import com.weatheradvisor.weather.analyzer.models.WeatherRecommendation
import java.util.Calendar
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class WeatherRecommendationGenerator @Inject constructor() {

    fun generateRecommendations(analysis: WeatherAnalysis): List<WeatherRecommendation> {
        val recommendations = mutableListOf<WeatherRecommendation>()

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Å–∞–¥–∫–∞–º
        if (analysis.dailySummary.precipitationExpected) {
            recommendations.add(createPrecipitationRecommendation(analysis))
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
        if (analysis.dailySummary.temperatureFluctuations) {
            recommendations.add(createTemperatureFluctuationRecommendation(analysis))
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–µ—Ç—Ä—É
        if (analysis.dailySummary.windyConditions) {
            recommendations.add(createWindRecommendation(analysis))
        }

        // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ö–æ—Ä–æ—à–µ–π –ø–æ–≥–æ–¥—ã
        if (!analysis.dailySummary.precipitationExpected &&
            !analysis.dailySummary.windyConditions &&
            analysis.day.avgTemperature in 18.0..28.0) {
            recommendations.add(createNiceWeatherRecommendation(analysis))
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        recommendations.addAll(generateTimeSpecificRecommendations(analysis))

        return recommendations
    }

    private fun createPrecipitationRecommendation(analysis: WeatherAnalysis): WeatherRecommendation {
        val message = when {
            analysis.morning.precipitationProbability > 0.5 -> "–£—Ç—Ä–æ–º –æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ–∂–¥—å. –í–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç!"
            analysis.day.precipitationProbability > 0.5 -> "–î–Ω—ë–º –≤–æ–∑–º–æ–∂–µ–Ω –¥–æ–∂–¥—å. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–æ–Ω—Ç!"
            analysis.evening.precipitationProbability > 0.5 -> "–í–µ—á–µ—Ä–æ–º –æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ–∂–¥—å. –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –¥–æ—Ä–æ–≥—É –¥–æ–º–æ–π –∑–∞—Ä–∞–Ω–µ–µ!"
            else -> "–í–æ–∑–º–æ–∂–Ω—ã –æ—Å–∞–¥–∫–∏. –õ—É—á—à–µ –≤–∑–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π!"
        }

        return WeatherRecommendation(
            id = "precipitation_${System.currentTimeMillis()}",
            message = message,
            priority = RecommendationPriority.HIGH,
            scheduledTime = getOptimalNotificationTime(analysis),
            type = RecommendationType.PRECIPITATION
        )
    }

    private fun createTemperatureFluctuationRecommendation(analysis: WeatherAnalysis): WeatherRecommendation {
        val tempDiff = analysis.dailySummary.temperatureRange.difference
        val message = when {
            tempDiff > 15 -> "–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–æ–π –ø–µ—Ä–µ–ø–∞–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä (${tempDiff.toInt()}¬∞C). –û–¥–µ–Ω—å—Ç–µ—Å—å –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ!"
            analysis.morning.avgTemperature < 15 && analysis.day.avgTemperature > 20 ->
                "–£—Ç—Ä–æ–º –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ (${analysis.morning.avgTemperature.toInt()}¬∞C), –¥–Ω—ë–º –ø–æ—Ç–µ–ø–ª–µ–µ—Ç –¥–æ ${analysis.day.avgTemperature.toInt()}¬∞C. –û–¥–µ–Ω—å—Ç–µ—Å—å –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ!"
            else -> "–ü–µ—Ä–µ–ø–∞–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä ${tempDiff.toInt()}¬∞C. –í—ã–±–∏—Ä–∞–π –æ–¥–µ–∂–¥—É –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–π!"
        }

        return WeatherRecommendation(
            id = "temperature_${System.currentTimeMillis()}",
            message = message,
            priority = RecommendationPriority.MEDIUM,
            scheduledTime = getMorningNotificationTime(),
            type = RecommendationType.TEMPERATURE
        )
    }

    private fun createWindRecommendation(analysis: WeatherAnalysis): WeatherRecommendation {
        val maxWindSpeed = maxOf(analysis.morning.windSpeed, analysis.day.windSpeed, analysis.evening.windSpeed)
        val message = when {
            maxWindSpeed > 10 -> "–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä –¥–æ ${maxWindSpeed.toInt()} –º/—Å. –û—Å—Ç–æ—Ä–æ–∂–Ω–µ–π –Ω–∞ —É–ª–∏—Ü–µ!"
            maxWindSpeed > 7 -> "–í–µ—Ç—Ä–µ–Ω–æ (${maxWindSpeed.toInt()} –º/—Å). –û–¥–µ–≤–∞–π—Ç–µ—Å—å —Ç–µ–ø–ª–µ–µ!"
            else -> "–£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä. –õ—ë–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç!"
        }

        return WeatherRecommendation(
            id = "wind_${System.currentTimeMillis()}",
            message = message,
            priority = RecommendationPriority.MEDIUM,
            scheduledTime = getOptimalNotificationTime(analysis),
            type = RecommendationType.WIND
        )
    }

    private fun createNiceWeatherRecommendation(analysis: WeatherAnalysis): WeatherRecommendation {
        val messages = listOf(
            "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏! ‚òÄÔ∏è",
            "–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞!",
            "–°–æ–ª–Ω–µ—á–Ω–æ –∏ —Ç–µ–ø–ª–æ. –ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏!",
            "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞! –ù–µ —Å–∏–¥–∏—Ç–µ –¥–æ–º–∞! üåû"
        )

        return WeatherRecommendation(
            id = "nice_weather_${System.currentTimeMillis()}",
            message = messages.random(),
            priority = RecommendationPriority.LOW,
            scheduledTime = getMorningNotificationTime(),
            type = RecommendationType.GENERAL
        )
    }

    private fun generateTimeSpecificRecommendations(analysis: WeatherAnalysis): List<WeatherRecommendation> {
        val recommendations = mutableListOf<WeatherRecommendation>()

        // –£—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (analysis.morning.avgTemperature < 5) {
            recommendations.add(
                WeatherRecommendation(
                id = "morning_cold_${System.currentTimeMillis()}",
                message = "–£—Ç—Ä–æ–º —Ö–æ–ª–æ–¥–Ω–æ (${analysis.morning.avgTemperature.toInt()}¬∞C). –û–¥–µ–≤–∞–π—Å—è —Ç–µ–ø–ª–µ–µ!",
                priority = RecommendationPriority.MEDIUM,
                scheduledTime = getMorningNotificationTime(),
                type = RecommendationType.TEMPERATURE
            )
            )
        }

        // –î–Ω–µ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (analysis.day.avgTemperature > 30) {
            recommendations.add(
                WeatherRecommendation(
                id = "day_hot_${System.currentTimeMillis()}",
                message = "–î–Ω—ë–º –∂–∞—Ä–∫–æ (${analysis.day.avgTemperature.toInt()}¬∞C). –ù–µ –∑–∞–±—É–¥—å –≤–æ–¥—É –∏ –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä!",
                priority = RecommendationPriority.HIGH,
                scheduledTime = getMorningNotificationTime(),
                type = RecommendationType.TEMPERATURE
            )
            )
        }

        return recommendations
    }

    private fun getOptimalNotificationTime(analysis: WeatherAnalysis): Long {
        // –ï—Å–ª–∏ –¥–æ–∂–¥—å —É—Ç—Ä–æ–º - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ 7:00
        // –ï—Å–ª–∏ –¥–æ–∂–¥—å –¥–Ω—ë–º - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ 11:00
        // –ï—Å–ª–∏ –¥–æ–∂–¥—å –≤–µ—á–µ—Ä–æ–º - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ 16:00
        val calendar = Calendar.getInstance()

        when {
            analysis.morning.precipitationProbability > 0.4 -> {
                calendar.set(Calendar.HOUR_OF_DAY, 7)
                calendar.set(Calendar.MINUTE, 0)
            }
            analysis.day.precipitationProbability > 0.4 -> {
                calendar.set(Calendar.HOUR_OF_DAY, 11)
                calendar.set(Calendar.MINUTE, 0)
            }
            analysis.evening.precipitationProbability > 0.4 -> {
                calendar.set(Calendar.HOUR_OF_DAY, 16)
                calendar.set(Calendar.MINUTE, 0)
            }
            else -> {
                calendar.set(Calendar.HOUR_OF_DAY, 8)
                calendar.set(Calendar.MINUTE, 0)
            }
        }

        return calendar.timeInMillis
    }

    private fun getMorningNotificationTime(): Long {
        val calendar = Calendar.getInstance()
        calendar.set(Calendar.HOUR_OF_DAY, 8)
        calendar.set(Calendar.MINUTE, 0)
        calendar.set(Calendar.SECOND, 0)
        return calendar.timeInMillis
    }
}